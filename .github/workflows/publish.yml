name: Publish App

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"    

jobs:
  publish:
    name: Publish
    runs-on: harana-dev-linux
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: harana/platform-images
          fetch-depth: 0
          ref: main
          token: ${{ secrets.READ_REPOSITORIES_TOKEN }}

      - name: Get Branch/Tag
        id: ref
        uses: frabert/replace-string-action@v1.2
        with:
          pattern: 'refs\/\w+\/(.*)'
          string: ${{ github.ref }}
          replace-with: '$1'

      - name: Get Short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 6

      - name: Get Version
        uses: haya14busa/action-cond@v1
        id: version
        with:
          cond: ${{ contains(github.ref, 'tag') }}
          if_true: ${{ steps.ref.outputs.replaced }}
          if_false: ${{ steps.ref.outputs.replaced }}-${{ steps.short-sha.outputs.sha }}

      - name: Setup Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Setup Packer
        uses: hashicorp-contrib/setup-packer@v1

      - name: Publish
        run: |
          packer build --color=false -on-error=abort \
            --var-file=packer/docker-private/harana/harana-${{ github.event.repository.name }}.pkrvars.hcl \
            --var app_github_username=harana-bot \
            --var app_github_password=${{ secrets.READ_REPOSITORIES_TOKEN }} \
            --var app_github_read_packages_token=${{ secrets.READ_PACKAGES_TOKEN }} \
            --var app_source_ref=${{ steps.ref.outputs.replaced }} \
            --var ecr_repository=${{ secrets.AWS_CICD_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_CICD_REGION }}.amazonaws.com \
            --var ecr_read_access_id=${{ secrets.AWS_CICD_READ_ECR_ACCESS_ID }} \
            --var ecr_read_secret_key=${{ secrets.AWS_CICD_READ_ECR_SECRET_KEY }} \
            --var ecr_write_access_id=${{ secrets.AWS_CICD_WRITE_ECR_ACCESS_ID }} \
            --var ecr_write_secret_key=${{ secrets.AWS_CICD_WRITE_ECR_SECRET_KEY }} \
            --var version=${{ steps.version.outputs.value }} \
            packer/docker-private

      - name: Notify Slack - Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_FOOTER: ""
          SLACK_MESSAGE: "✅  harana-${{ github.event.repository.name }}  | publish | ${{ steps.version.outputs.value }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_BUILDS_WEBHOOK }}

      - name: Notify Slack - Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_FOOTER: ""
          SLACK_MESSAGE: "⛔️  harana-${{ github.event.repository.name }}  | publish | ${{ steps.version.outputs.value }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_BUILDS_WEBHOOK }}

      - name: Output Version
        if: success()
        run: |
          echo ${{ steps.version.outputs.value }}